
---
- hosts: all
  name: default installation
  become: true
  become_method: "{{ 'su' if ansible_distribution == 'debian' else 'sudo' }}"
  become_user: root
  become_flags: "{{ '-' if ansible_distribution == 'debian' else '-s' }}"
  vars: 
    upgrade_done: false

  pre_tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
      register: upgrade_result  # Capture the output of the upgrade task
      tags: 
        - upgrade_apt
      when: not upgrade_done

    - name: Show update and upgrade result
      debug:
        var: upgrade_result

    - name: Set upgrade_done to true
      set_fact:
        upgrade_done: true
      when: upgrade_result.changed  # Update only if the apt upgrade task made changes

    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - socat
        state: present
        update_cache: yes
      register: install_result
      tags:
        - install_packages

    - name: Show installation progress
      debug:
        var: install_result

    - name: Disable AppArmor
      service:
        name: apparmor
        state: stopped
        enabled: 'no'
      register: apparmor_result
      tags:
        - disable_apparmor

    - name: Show AppArmor status
      debug:
        var: "AppArmor service stopped: {{ apparmor_result.changed }}"

    - name: Set timezone
      command: timedatectl set-timezone {{ timezone }}
      tags:
        - set_timezone

  roles:
    - role: kernel_config
      tags: 
        - kernel_config
    - role: docker
      tags:
        - docker
      # when: install_docker | default(false)
    - role: ntp-client
      tags:
        - ntp-client
    # - role: docker-uninstall
    #   tags:
    #     - docker-uninstall


